# -*- coding: utf-8 -*-
"""Pessenger (ARIMA).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1myiIAmkTWc5NI_4Q7B64K3O4uvqKTDch
"""

# ignore warnings
import pandas as pd,matplotlib.pyplot as plt
import warnings
warnings.filterwarnings("ignore")

# load dataset
import numpy as np, pandas as pd
import matplotlib.pyplot as plt
from pandas import read_csv
from pandas import datetime
from matplotlib import pyplot
from pandas.plotting import autocorrelation_plot

df=pd.read_csv('/content/data.csv')

df

df.columns

df = df[['Month','Passengers']]
df.plot()

df = df.set_index('Month')
fig = plt.figure(figsize = (7,4))
autocorrelation_plot(df)
plt.show()

print(df.head(5))

"""#Checking Stationarity Using Dickey-Fuller test """

from statsmodels.tsa.stattools import adfuller
result = adfuller(df['Passengers'])
print('ADF Statistic: %f' % result[0])
print('p-value: %f' % result[1])
print('Critical Values:')
for key, value in result[4].items():
  print('\t%s: %.3f' % (key, value))

"""# Finding the value of the d parameter """

plt.rcParams.update({'figure.figsize':(18,10)})

# Original Series
fig, (ax1, ax2, ax3, ax4) = plt.subplots(4)
ax1.plot(df.Passengers); ax1.set_title('Original Series')

# 1st Differencing
ax2.plot(df.Passengers.diff()); ax2.set_title('1st Order Differencing')

# 2nd Differencing
ax3.plot(df.Passengers.diff().diff()); ax3.set_title('2nd Order Differencing')

# 3nd Differencing
ax4.plot(df.Passengers.diff().diff().diff()); ax4.set_title('3nd Order Differencing')
plt.show()

from statsmodels.graphics.tsaplots import plot_acf
fig, (ax1, ax2, ax3, ax4) = plt.subplots(4)
plot_acf(df.Passengers, ax=ax1)
plot_acf(df.Passengers.diff().dropna(), ax=ax2)
plot_acf(df.Passengers.diff().diff().dropna(), ax=ax3)
plot_acf(df.Passengers.diff().diff().diff().dropna(), ax=ax4)

"""# Finding the value of the p parameter"""

from statsmodels.graphics.tsaplots import plot_pacf
plot_pacf(df.Passengers.diff().dropna())

"""# Finding the value of the q parameter"""

plot_acf(df.Passengers.diff().dropna())

from statsmodels.tsa.arima_model import ARIMA
model = ARIMA(df.Passengers, order = (0,1,1))
model_fit = model.fit(disp=-1)
model_fit.summary()

pip install pmdarima

import pmdarima as pm
def arimamodel(timeseries):
    automodel = pm.auto_arima(timeseries, 
                              start_p=3, 
                              start_q=3,
                              max_p=5,
                              max_q=5,
                              test="adf",
                              seasonal=True,
                              trace=True)
    return automodel